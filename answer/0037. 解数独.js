/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://leetcode-cn.com/problems/sudoku-solver/

编写一个程序，通过已填充的空格来解决数独问题。
一个数独的解法需遵循如下规则：
数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
空白格用 '.' 表示。
    —————————————————————————————————————
    | 5 | 3 |   |   | 7 |   |   |   |   |
    —————————————————————————————————————
    | 6 |   |   | 1 | 9 | 5 |   |   |   |
    —————————————————————————————————————
    |   | 9 | 8 |   |   |   |   | 6 |   |
    —————————————————————————————————————
    | 8 |   |   |   | 6 |   |   |   | 3 |
    —————————————————————————————————————
    | 4 |   |   | 8 |   | 3 |   |   | 1 |
    —————————————————————————————————————
    | 7 |   |   |   | 2 |   |   |   | 6 |   
    —————————————————————————————————————    
    |   | 6 |   |   |   |   | 2 | 8 |   |    
    —————————————————————————————————————
    |   |   |   | 4 | 1 | 9 |   |   | 5 | 
    —————————————————————————————————————
    |   |   |   |   | 8 |   |   | 7 | 9 |
    —————————————————————————————————————
一个数独。
    —————————————————————————————————————
    | 5 | 3 |#4#|#6#| 7 |#8#|#9#|#1#|#2#|
    —————————————————————————————————————
    | 6 |#7#|#2#| 1 | 9 | 5 |#3#|#4#|#8#|
    —————————————————————————————————————
    |#1#| 9 | 8 |#3#|#4#|#2#|#5#| 6 |#7#|
    —————————————————————————————————————
    | 8 |#5#|#9#|#7#| 6 |#1#|#4#|#2#| 3 |
    —————————————————————————————————————
    | 4 |#2#|#6#| 8 |#5#| 3 |#7#|#9#| 1 |
    —————————————————————————————————————
    | 7 |#1#|#3#|#9#| 2 |#4#|#8#|#5#| 6 |   
    —————————————————————————————————————    
    |#9#| 6 |#1#|#5#|#3#|#7#| 2 | 8 |#4#|    
    —————————————————————————————————————
    |#2#|#8#|#7#| 4 | 1 | 9 |#6#|#3#| 5 | 
    —————————————————————————————————————
    |#3#|#4#|#5#|#2#| 8 |#6#|#1#| 7 | 9 |
    —————————————————————————————————————
答案被标成红色。
Note:
    给定的数独序列只包含数字 1-9 和字符 '.' 。
    你可以假设给定的数独只有唯一解。
    给定数独永远是 9x9 形式的。

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/

/**
 * @param {character[][]} board
 * @return {void} Do not return anything, modify board in-place instead.
 */
var solveSudoku = function(board) {
	let row = [],
		col = [],
		block = [];
	for (let i = 0; i < 9; i++) {
		row.push([]);
		col.push([]);
		block.push([]);
	}
	for (let i = 0; i < 9; i++) {
		for (let j = 0; j < 9; j++) {
			if (board[i][j] !== '.') {
				let num = board[i][j] * 1;
				let blockIndex = Math.floor(i / 3) * 3 + Math.floor(j / 3);
				row[i][num] = true;
				col[j][num] = true;
				block[blockIndex][num] = true;
			}
		}
	}
	let dfs = (board, row, col, block, i, j) => {
		while (board[i][j] !== '.') {
			if (++j >= 9) {
				i++;
				j = 0;
			}
			if (i >= 9) {
				return true;
			}
		}
		for (let num = 1; num <= 9; num++) {
			let blockIndex = Math.floor(i / 3) * 3 + Math.floor(j / 3);
			if (!row[i][num] && !col[j][num] && !block[blockIndex][num]) {
				board[i][j] = num + '';
				row[i][num] = true;
				col[j][num] = true;
				block[blockIndex][num] = true;
				if (dfs(board, row, col, block, i, j)) {
					return true;
				} else {
					board[i][j] = '.';
					row[i][num] = false;
					col[j][num] = false;
					block[blockIndex][num] = false;
				}
			}
		}
		return false;
	};
	dfs(board, row, col, block, 0, 0);
};

